Given an array of integers arr, you are initially positioned at the first index of the array.

In one step you can jump from index i to index:

i + 1 where: i + 1 < arr.length.
i - 1 where: i - 1 >= 0.
j where: arr[i] == arr[j] and i != j.
Return the minimum number of steps to reach the last index of the array.

Notice that you can not jump outside of the array at any time.

 

Example 1:

Input: arr = [100,-23,-23,404,100,23,23,23,3,404]
Output: 3
Explanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.
Example 2:

Input: arr = [7]
Output: 0
Explanation: Start index is the last index. You do not need to jump.
Example 3:

Input: arr = [7,6,9,6,9,6,9,7]
Output: 1
Explanation: You can jump directly from index 0 to index 7 which is last index of the array.
 

Constraints:

1 <= arr.length <= 5 * 104
-108 <= arr[i] <= 108

##solution:

class Solution {
public:
    int minJumps(vector<int>& arr) {
        int n = arr.size();
        vector<int> visited(n); // to mark visited indices
        unordered_map<int, vector<int>> indices; // to store indices of each value in arr
        for (int i = 0; i < n; i++) {
            indices[arr[i]].push_back(i);
        }
        queue<int> q;
        q.push(0); // start from index 0
        visited[0] = 1; // mark index 0 as visited
        int steps = 0;
        while (!q.empty()) {
            int size = q.size();
            while (size--) {
                int i = q.front();
                q.pop();
                if (i == n - 1) { // reached last index
                    return steps;
                }
                // check adjacent indices (i+1 and i-1)
                if (i - 1 >= 0 && !visited[i - 1]) {
                    q.push(i - 1);
                    visited[i - 1] = 1;
                }
                if (i + 1 < n && !visited[i + 1]) {
                    q.push(i + 1);
                    visited[i + 1] = 1;
                }
                // check indices with same value
                for (int j : indices[arr[i]]) {
                    if (!visited[j]) {
                        q.push(j);
                        visited[j] = 1;
                    }
                }
                // clear the indices to avoid revisiting them
                indices[arr[i]].clear();
            }
            steps++;
        }
        return -1; // cannot reach last index
    }
};
